using GalleryApp.Classes;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;

namespace GalleryApp.Pages
{
    public partial class ContentPageAdmin : Page
    {
        private byte[] _defaultImage;

        public ContentPageAdmin()
        {
            InitializeComponent();
            LoadDefaultImage();
            Init();
        }

        private void LoadDefaultImage()
        {
            try
            {
                var uri = new Uri("pack://application:,,,/Resources/smallcrow.png", UriKind.Absolute);
                var resourceStream = Application.GetResourceStream(uri);

                if (resourceStream != null)
                {
                    using (var memoryStream = new MemoryStream())
                    {
                        resourceStream.Stream.CopyTo(memoryStream);
                        _defaultImage = memoryStream.ToArray();
                    }
                }
            }
            catch
            {
                _defaultImage = null;
            }
        }

        public List<Data.Art> _product = new List<Data.Art>();

        private void Init()
        {
            try
            {
                var products = Data.gallerydatabaseEntities.GetContext().Art.ToList();

                foreach (var art in products)
                {
                    if (art.ProductPhoto == null || art.ProductPhoto.Length == 0)
                        art.ProductPhoto = _defaultImage;
                }

                ProductsListView.ItemsSource = products;
                _product = products;

                var sizeTypeList = Data.gallerydatabaseEntities.GetContext().TypeSize.ToList();
                sizeTypeList.Insert(0, new Data.TypeSize { Id = 0, Size = "Все размеры" });
                SizeTypeComboBox.ItemsSource = sizeTypeList;
                SizeTypeComboBox.SelectedIndex = 0;

                var exhibitionList = Data.gallerydatabaseEntities.GetContext().Exibition.ToList();
                ExhibitionFilterComboBox.ItemsSource = exhibitionList;
                ExhibitionFilterComboBox.SelectedIndex = -1; 


                Console.WriteLine($"Количество выставок: {exhibitionList.Count}");

                if (Manager.CurrentUser != null)
                {
                    FIOLabel.Visibility = Visibility.Visible;
                    FIOLabel.Content = $"{Manager.CurrentUser.LastName} {Manager.CurrentUser.FirstName} {Manager.CurrentUser.MiddleName}";
                    ProductsListView.Visibility = Visibility.Visible; 
                    Update(); 
                }
                else
                {
                    FIOLabel.Visibility = Visibility.Hidden;
                    ProductsListView.Visibility = Visibility.Hidden;
                    CountOfLabel.Content = "0/0"; 
                }

                CountOfLabel.Content = $"{products.Count}/{products.Count}";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public void Update()
        {
            try
            {
                var context = Data.gallerydatabaseEntities.GetContext();
                // Берём все товары из базы (в нашем случае – после поиска)
                var products = context.Art.ToList();

                // Фильтрация по поиску
                if (!string.IsNullOrEmpty(SearchTextBox.Text))
                {
                    string search = SearchTextBox.Text.ToLower();
                    products = products.Where(item =>
                        (item.title != null && item.title.ToLower().Contains(search)) ||
                        (item.author != null && item.author.ToLower().Contains(search)) ||
                        (item.genre != null && item.genre.ToLower().Contains(search)) ||
                        (item.Exibition != null && item.Exibition.Name != null && item.Exibition.Name.ToLower().Contains(search))
                    ).ToList();
                }

                // Фильтрация по выставке – если пользователь что-то выбрал
                var selectedExhibition = ExhibitionFilterComboBox.SelectedItem as Data.Exibition;
                if (selectedExhibition != null)
                {
                    products = products.Where(p => p.idExibition == selectedExhibition.Id).ToList();
                }

                // Фильтрация по типу размера – если выбор сделан
                var selectedSizeType = SizeTypeComboBox.SelectedItem as Data.TypeSize;
                if (selectedSizeType != null)
                {
                    products = products.Where(p => p.idTypeSize == selectedSizeType.Id).ToList();
                }

                // Сортировка
                if (SortUpRadioButton.IsChecked == true)
                {
                    products = products.OrderBy(p => p.price).ToList();
                }
                else if (SortDownRadioButton.IsChecked == true)
                {
                    products = products.OrderByDescending(p => p.price).ToList();
                }

                CountOfLabel.Content = $"{products.Count}/{context.Art.Count()}";
                ProductsListView.ItemsSource = products;
                ProductsListView.Items.Refresh();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Ошибка: " + ex.Message);
            }
        }




        private void SearchTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            Update();
        }

        private void SortUpRadioButton_Checked(object sender, RoutedEventArgs e)
        {
            Update();
        }

        private void SortDownRadioButton_Checked(object sender, RoutedEventArgs e)
        {
            Update();
        }   

        private void SizeTypeComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Update();
        }

        private void ExhibitionFilterComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Update();
        }


        private void EditButton_Click(object sender, RoutedEventArgs e)
        {
            var selectedArt = (sender as Button)?.DataContext as Data.Art;
            if (selectedArt != null)
                Classes.Manager.MainFrame.Navigate(new Pages.AddEditProductPage(selectedArt));
        }

        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var selectedArt = (sender as Button)?.DataContext as Data.Art;
                if (selectedArt != null)
                {
                    var result = MessageBox.Show("Вы уверены, что хотите удалить это произведение?",
                                                  "Подтверждение удаления",
                                                  MessageBoxButton.YesNo,
                                                  MessageBoxImage.Warning);

                    if (result == MessageBoxResult.Yes)
                    {
                        var context = Data.gallerydatabaseEntities.GetContext();
                        var artToDelete = context.Art.FirstOrDefault(a => a.id == selectedArt.id);
                        if (artToDelete != null)
                        {
                            context.Art.Remove(artToDelete);
                            context.SaveChanges();

                            Update();
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Пожалуйста, выберите произведение для удаления.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при удалении: {ex.Message}");
            }
        }

        private void AddButton_Click(object sender, RoutedEventArgs e)
        {
            Classes.Manager.MainFrame.Navigate(new Pages.AddEditProductPage(null));
        }

        private void AddUserButton_Click(object sender, RoutedEventArgs e)
        {
            Classes.Manager.MainFrame.Navigate(new Pages.AddEditAccountsPage());
        }

        private void BackButton_Click(object sender, RoutedEventArgs e)
        {
            if (Classes.Manager.MainFrame.CanGoBack)
            {
                if (Classes.Manager.CurrentUser != null)
                {
                    Classes.Manager.CurrentUser = null;
                }
                Classes.Manager.MainFrame.GoBack();
            }
        }
    }
}


























<Page x:Class="GalleryApp.Pages.ContentPageAdmin"
          xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
          xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
          xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
          xmlns:local="clr-namespace:GalleryApp.Pages"
          mc:Ignorable="d" 
          d:DesignHeight="450" d:DesignWidth="800"
          Title="ContentPageAdmin">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="50"></RowDefinition>
            <RowDefinition Height="70"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="50"></RowDefinition>
        </Grid.RowDefinitions>

        <Label x:Name="CountOfLabel" Grid.Row="0"
               HorizontalAlignment="Left"
               VerticalAlignment="Center"
               Content="123" Margin="10,0,0,0"></Label>

        <Label x:Name="FIOLabel" Grid.Row="0"
               HorizontalAlignment="Right"
               VerticalAlignment="Center"
               Content="ФИО" Margin="0,0,10,0"></Label>

        <Grid Grid.Row="1">
            <TextBox x:Name="SearchTextBox"
                     VerticalAlignment="Center"
                     HorizontalAlignment="Left"
                     Margin="10,0,0,0" Width="130"
                     TextChanged="SearchTextBox_TextChanged"></TextBox>

            <RadioButton x:Name="SortUpRadioButton"
                         Content="По возрастанию"
                         VerticalAlignment="Center"
                         HorizontalAlignment="Left"
                         Margin="170,0,0,0"
                         Checked="SortUpRadioButton_Checked"></RadioButton>

            <RadioButton x:Name="SortDownRadioButton"
                         Content="По Убыванию"
                         VerticalAlignment="Center"
                         HorizontalAlignment="Left"
                         Margin="300,0,0,0"
                         Checked="SortDownRadioButton_Checked"></RadioButton>

            <ComboBox x:Name="SizeTypeComboBox" VerticalAlignment="Center"
                      HorizontalAlignment="Left" Margin="420,0,0,0" Width="150"
                      SelectionChanged="SizeTypeComboBox_SelectionChanged"  DisplayMemberPath="Size"></ComboBox>

            <ComboBox x:Name="ExhibitionFilterComboBox"
          VerticalAlignment="Center"
          DisplayMemberPath="Name" 
          HorizontalAlignment="Left"
          Margin="590,0,0,0"
          Width="150"
          SelectionChanged="ExhibitionFilterComboBox_SelectionChanged">
            </ComboBox>


        </Grid>

        <ListView x:Name="ProductsListView"
                  VerticalContentAlignment="Center"
                  HorizontalContentAlignment="Center"
                  Margin="10" Grid.Row="2">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="150"></ColumnDefinition>
                            <ColumnDefinition Width="400"></ColumnDefinition>
                            <ColumnDefinition Width="150"></ColumnDefinition>
                            <ColumnDefinition Width="150"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Image Grid.Column="0"
                               Margin="10">
                            <Image.Source>
                                <Binding Path="ProductPhoto">
                                    <Binding.TargetNullValue>
                                        <BitmapImage UriSource="/Resources/smallcrow.png"></BitmapImage>
                                    </Binding.TargetNullValue>
                                </Binding>
                            </Image.Source>
                        </Image>
                        <StackPanel Grid.Column="1"
                                    VerticalAlignment="Center">
                            <TextBlock Text="{Binding title, StringFormat={}Название: {0}}" ></TextBlock>
                            <TextBlock Text="{Binding author, StringFormat={}Автор: {0}}"></TextBlock>
                            <TextBlock Text="{Binding size, StringFormat={}Размер: {0}}"></TextBlock>
                            <TextBlock Text="{Binding price, StringFormat={}Цена: {0}}"></TextBlock>
                        </StackPanel>
                        <Button Grid.Column="2" Content="Редактировать" x:Name="EditButton" Width="100" Height="30" Click="EditButton_Click" HorizontalAlignment="left"></Button>
                        <Button Grid.Column="2" Content="Удалить" x:Name="DeleteButton" Width="100" Height="30" Click="DeleteButton_Click" HorizontalAlignment="Right"></Button>
                    </Grid>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>

        <Button Grid.Row="3" HorizontalAlignment="Right" Content="Добавить"
        x:Name="AddButton" Width="100" Height="30" Click="AddButton_Click"/>
        <Button x:Name="BackButton" Content="Назад" HorizontalAlignment="Left"
        Click="BackButton_Click" Grid.Row="3"/>
        <Button x:Name="AddUserButton" Content="Добавить пользователя"
        Width="160" Height="30"
        HorizontalAlignment="Center"
        Click="AddUserButton_Click" Grid.Row="3"/>
    </Grid>
</Page>